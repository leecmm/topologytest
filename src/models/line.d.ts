import { Pen } from "./pen";
import { Point } from "./point";
import { Rect } from "./rect";
export declare class Line extends Pen {
    from: Point;
    to: Point;
    controlPoints: Point[];
    fromArrow: string;
    toArrow: string;
    fromArrowSize: number;
    toArrowSize: number;
    fromArrowColor: string;
    toArrowColor: string;
    length: number;
    borderWidth: number;
    borderColor: string;
    animateColor: string;
    animateSpan: number;
    animatePos: number;
    animateLineDash: number[];
    isAnimate: boolean;
    animateFromSize: number;
    animateToSize: number;
    animateDot: {
        x: number;
        y: number;
    };
    animateDotSize: number;
    lineJoin: "miter";
    manualCps: boolean;
    disableEmptyLine: boolean;
    constructor(json?: any);
    setFrom(from: Point, fromArrow?: string): void;
    setTo(to: Point, toArrow?: string): void;
    calcControlPoints(force?: boolean): void;
    draw(ctx: CanvasRenderingContext2D): void;
    pointIn(pt: Point): any;
    getLen(): number;
    calcTextRect(): void;
    getTextRect(): Rect;
    getCenter(): Point;
    getLineCenter(from: Point, to: Point): Point;
    getPointByPos(pos: number): Point;
    getLinePtByPos(from: Point, to: Point, pos: number): Point;
    calcRectInParent(parent: Pen): void;
    calcRectByParent(parent: Pen): void;
    animate(now: number): void;
    getBubbles(): any[];
    round(): void;
    translate(x: number, y: number): void;
    scale(scale: number, center: Point): void;
    clone(): Line;
}
