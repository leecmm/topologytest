import { Point } from './point';
import { Rect } from './rect';
import { EventType, EventAction } from './event';
import { Lock } from './status';
export declare enum PenType {
    Node = 0,
    Line = 1
}
export declare abstract class Pen {
    TID: string;
    id: string;
    type: PenType;
    name: string;
    tags: string[];
    rect: Rect;
    lineWidth: number;
    rotate: number;
    offsetRotate: number;
    globalAlpha: number;
    dash: number;
    lineDash: number[];
    lineDashOffset: number;
    strokeStyle: string;
    fillStyle: string;
    lineCap: string;
    font: {
        color: string;
        fontFamily: string;
        fontSize: number;
        lineHeight: number;
        fontStyle: string;
        fontWeight: string;
        textAlign: string;
        textBaseline: string;
        background: string;
    };
    text: string;
    textMaxLine: number;
    textRect: Rect;
    fullTextRect: Rect;
    textOffsetX: number;
    textOffsetY: number;
    shadowColor: string;
    shadowBlur: number;
    shadowOffsetX: number;
    shadowOffsetY: number;
    animateFn: string | Function;
    animateType: string;
    animateStart: number;
    animateCycle: number;
    animateCycleIndex: number;
    nextAnimate: string;
    animatePlay: boolean;
    locked: Lock;
    stand: boolean;
    hideInput: boolean;
    hideRotateCP: boolean;
    hideSizeCP: boolean;
    hideAnchor: boolean;
    markdown: string;
    tipId: string;
    title: string;
    events: {
        type: EventType;
        action: EventAction;
        value: string;
        params: string;
        name?: string;
    }[];
    private eventFns;
    parentId: string;
    rectInParent: {
        x: number | string;
        y: number | string;
        width: number | string;
        height: number | string;
        marginTop?: number | string;
        marginRight?: number | string;
        marginBottom?: number | string;
        marginLeft?: number | string;
        rotate: number;
        rect?: Rect;
    };
    paddingTopNum: number;
    paddingBottomNum: number;
    paddingLeftNum: number;
    paddingRightNum: number;
    visible: boolean;
    data: any;
    value: number;
    constructor(json?: any);
    render(ctx: CanvasRenderingContext2D): void;
    hit(point: Point, padding?: number): boolean;
    click(): void;
    dblclick(): void;
    doSocketMqtt(item: {
        type: EventType;
        action: EventAction;
        value: string;
        params: string;
        name?: string;
    }, msg: any, client: any): void;
    show(): this;
    hide(): this;
    isVisible(): boolean;
    getTID(): string;
    setTID(id: any): this;
    private link;
    private doAnimate;
    private doFn;
    private doWindowFn;
    protected generateStoreKey(key: any): string;
    abstract getTextRect(): Rect;
    abstract calcRectInParent(parent: Pen): void;
    abstract calcRectByParent(parent: Pen): void;
    abstract draw(ctx: CanvasRenderingContext2D): void;
    abstract animate(now: number): void;
    abstract translate(x: number, y: number): void;
    abstract scale(scale: number, center?: Point): void;
    abstract clone(): Pen;
}
